{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin pc\\\\Desktop\\\\card-game\\\\src\\\\WordCard.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport CharacterCard from './CharacterCard';\nimport _ from 'lodash';\n\nconst prepareStateFromWord = given_word => {\n  let word = given_word.toUpperCase();\n\n  let chars = _.shuffle(Array.from(word));\n\n  return {\n    word,\n    chars,\n    attempt: 1,\n    guess: [],\n    completed: false\n  };\n};\n\nexport default class WordCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.activationHandler = c => {\n      let guess = [...this.state.guess, c];\n      this.setState({\n        guess\n      });\n\n      if (guess.length == this.state.chars.length) {\n        if (guess.join('').toString() == this.state.word) {\n          this.setState({\n            guess: [],\n            completed: true\n          });\n        } else {\n          this.setState({\n            guess: [],\n            attempt: this.state.attempt + 1\n          });\n        }\n      }\n    };\n\n    this.state = {\n      attempt: ''\n    };\n  }\n\n  componentWillMount() {\n    let data = prepareStateFromWord(this.props.value);\n    this.setState({\n      word: data.word,\n      chars: data.chars,\n      attempt: data.attempt,\n      guess: data.guess,\n      completed: data.completed\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.state.chars.map((c, i) => React.createElement(CharacterCard, {\n      value: c,\n      key: i,\n      attempt: this.state.attempt,\n      activationHandler: this.activationHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Admin pc\\Desktop\\card-game\\src\\WordCard.js"],"names":["React","Component","CharacterCard","_","prepareStateFromWord","given_word","word","toUpperCase","chars","shuffle","Array","from","attempt","guess","completed","WordCard","constructor","props","activationHandler","c","state","setState","length","join","toString","componentWillMount","data","value","render","console","log","map","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,oBAAoB,GAAIC,UAAD,IAAgB;AACzC,MAAIC,IAAI,GAAGD,UAAU,CAACE,WAAX,EAAX;;AACA,MAAIC,KAAK,GAAGL,CAAC,CAACM,OAAF,CAAUC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAV,CAAZ;;AACA,SAAO;AACHA,IAAAA,IADG;AAEHE,IAAAA,KAFG;AAGHI,IAAAA,OAAO,EAAE,CAHN;AAIHC,IAAAA,KAAK,EAAE,EAJJ;AAKHC,IAAAA,SAAS,EAAE;AALR,GAAP;AAOH,CAVD;;AAaA,eAAe,MAAMC,QAAN,SACXd,SADW,CACD;AACVe,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAgBnBC,iBAhBmB,GAgBEC,CAAD,IAAO;AACvB,UAAIN,KAAK,GAAG,CAAC,GAAG,KAAKO,KAAL,CAAWP,KAAf,EAAsBM,CAAtB,CAAZ;AACA,WAAKE,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;;AACA,UAAIA,KAAK,CAACS,MAAN,IAAgB,KAAKF,KAAL,CAAWZ,KAAX,CAAiBc,MAArC,EAA6C;AACzC,YAAIT,KAAK,CAACU,IAAN,CAAW,EAAX,EAAeC,QAAf,MAA6B,KAAKJ,KAAL,CAAWd,IAA5C,EAAkD;AAC9C,eAAKe,QAAL,CAAc;AAAER,YAAAA,KAAK,EAAE,EAAT;AAAaC,YAAAA,SAAS,EAAE;AAAxB,WAAd;AACH,SAFD,MAEO;AACH,eAAKO,QAAL,CAAc;AAAER,YAAAA,KAAK,EAAE,EAAT;AAAaD,YAAAA,OAAO,EAAE,KAAKQ,KAAL,CAAWR,OAAX,GAAqB;AAA3C,WAAd;AACH;AACJ;AACJ,KA1BkB;;AAEf,SAAKQ,KAAL,GAAa;AACTR,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AACDa,EAAAA,kBAAkB,GAAG;AACjB,QAAIC,IAAI,GAAGtB,oBAAoB,CAAC,KAAKa,KAAL,CAAWU,KAAZ,CAA/B;AACA,SAAKN,QAAL,CAAc;AACVf,MAAAA,IAAI,EAAEoB,IAAI,CAACpB,IADD;AAEVE,MAAAA,KAAK,EAAEkB,IAAI,CAAClB,KAFF;AAGVI,MAAAA,OAAO,EAAEc,IAAI,CAACd,OAHJ;AAIVC,MAAAA,KAAK,EAAEa,IAAI,CAACb,KAJF;AAKVC,MAAAA,SAAS,EAAEY,IAAI,CAACZ;AALN,KAAd;AAOH;;AAYDc,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAjB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKA,KAAL,CAAWZ,KAAX,CAAiBuB,GAAjB,CAAqB,CAACZ,CAAD,EAAIa,CAAJ,KAAU,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEb,CAAtB;AAAyB,MAAA,GAAG,EAAEa,CAA9B;AAAiC,MAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWR,OAArD;AAC3B,MAAA,iBAAiB,EAAE,KAAKM,iBADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/B,CAFR,CADJ;AAQH;;AAtCS","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport CharacterCard from './CharacterCard';\nimport _ from 'lodash';\n\nconst prepareStateFromWord = (given_word) => {\n    let word = given_word.toUpperCase()\n    let chars = _.shuffle(Array.from(word))\n    return {\n        word,\n        chars,\n        attempt: 1,\n        guess: [],\n        completed: false\n    }\n}\n\n\nexport default class WordCard extends\n    Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            attempt: '',\n        }\n    }\n    componentWillMount() {\n        let data = prepareStateFromWord(this.props.value);\n        this.setState({\n            word: data.word,\n            chars: data.chars,\n            attempt: data.attempt,\n            guess: data.guess,\n            completed: data.completed,\n        })\n    }\n    activationHandler = (c) => {\n        let guess = [...this.state.guess, c]\n        this.setState({ guess })\n        if (guess.length == this.state.chars.length) {\n            if (guess.join('').toString() == this.state.word) {\n                this.setState({ guess: [], completed: true })\n            } else {\n                this.setState({ guess: [], attempt: this.state.attempt + 1 })\n            }\n        }\n    }\n    render() {\n        console.log(this.state);\n        return (\n            <div>\n                {\n                    this.state.chars.map((c, i) => <CharacterCard value={c} key={i} attempt={this.state.attempt}\n                        activationHandler={this.activationHandler} />)\n                }\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}