{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin pc\\\\Desktop\\\\card-game\\\\src\\\\App.js\";\nimport React from 'react';\nimport CharacterCard from './CharacterCard';\nimport './App.css';\nimport _ from 'lodash';\nlet message = 'NATTHAWUT';\n\nconst prepareStateFromWord = given_word => {\n  let word = given_word.toUpperCase();\n\n  let chars = _.shuffle(Array.from(word));\n\n  return {\n    word,\n    chars,\n    attempt: 1,\n    guess: [],\n    completed: false\n  };\n};\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = prepareStateFromWord(message);\n\n    this.activationHandler = c => {\n      let guess = [...this.state.guess, c];\n      this.setState({\n        guess\n      });\n\n      if (guess.length == this.state.chars.length) {\n        if (guess.join('').toString() == this.state.word) {\n          this.setState({\n            guess: [],\n            completed: true\n          });\n        } else {\n          this.setState({\n            guess: [],\n            attempt: this.state.attempt + 1\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, Array.from(this.state.chars).map((item, index) => React.createElement(CharacterCard, {\n      value: item,\n      key: index,\n      activationHandler: this.activationHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Selected\"), Array.from(this.state.guess).map((item, index) => React.createElement(CharacterCard, {\n      value: item,\n      key: index,\n      activationHandler: this.activationHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Attemp \", this.state.attempt), this.state.completed && React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Complete\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Admin pc\\Desktop\\card-game\\src\\App.js"],"names":["React","CharacterCard","_","message","prepareStateFromWord","given_word","word","toUpperCase","chars","shuffle","Array","from","attempt","guess","completed","App","Component","state","activationHandler","c","setState","length","join","toString","render","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,WAAP;AAEA,OAAOC,CAAP,MAAc,QAAd;AAGA,IAAIC,OAAO,GAAG,WAAd;;AAGA,MAAMC,oBAAoB,GAAIC,UAAD,IAAgB;AAE3C,MAAIC,IAAI,GAAGD,UAAU,CAACE,WAAX,EAAX;;AAEA,MAAIC,KAAK,GAAGN,CAAC,CAACO,OAAF,CAAUC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAV,CAAZ;;AAEA,SAAO;AAELA,IAAAA,IAFK;AAILE,IAAAA,KAJK;AAMLI,IAAAA,OAAO,EAAE,CANJ;AAQLC,IAAAA,KAAK,EAAE,EARF;AAULC,IAAAA,SAAS,EAAE;AAVN,GAAP;AAcD,CApBD;;AAuBA,MAAMC,GAAN,SAAkBf,KAAK,CAACgB,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAGhCC,KAHgC,GAGxBb,oBAAoB,CAACD,OAAD,CAHI;;AAAA,SAMhCe,iBANgC,GAMXC,CAAD,IAAO;AAEzB,UAAIN,KAAK,GAAG,CAAC,GAAG,KAAKI,KAAL,CAAWJ,KAAf,EAAsBM,CAAtB,CAAZ;AAEA,WAAKC,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;;AAEA,UAAIA,KAAK,CAACQ,MAAN,IAAgB,KAAKJ,KAAL,CAAWT,KAAX,CAAiBa,MAArC,EAA6C;AAE3C,YAAIR,KAAK,CAACS,IAAN,CAAW,EAAX,EAAeC,QAAf,MAA6B,KAAKN,KAAL,CAAWX,IAA5C,EAAkD;AAEhD,eAAKc,QAAL,CAAc;AAAEP,YAAAA,KAAK,EAAE,EAAT;AAAaC,YAAAA,SAAS,EAAE;AAAxB,WAAd;AAED,SAJD,MAIO;AAEL,eAAKM,QAAL,CAAc;AAAEP,YAAAA,KAAK,EAAE,EAAT;AAAaD,YAAAA,OAAO,EAAE,KAAKK,KAAL,CAAWL,OAAX,GAAqB;AAA3C,WAAd;AAED;AAEF;AAEF,KA1B+B;AAAA;;AA6BhCY,EAAAA,MAAM,GAAG;AAEP,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIId,KAAK,CAACC,IAAN,CAAW,KAAKM,KAAL,CAAWT,KAAtB,EAA6BiB,GAA7B,CAAiC,CAACC,IAAD,EAAOC,KAAP,KAE/B,oBAAC,aAAD;AAEE,MAAA,KAAK,EAAED,IAFT;AAIE,MAAA,GAAG,EAAEC,KAJP;AAME,MAAA,iBAAiB,EAAE,KAAKT,iBAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAJJ,EAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBF,EAwBIR,KAAK,CAACC,IAAN,CAAW,KAAKM,KAAL,CAAWJ,KAAtB,EAA6BY,GAA7B,CAAiC,CAACC,IAAD,EAAOC,KAAP,KAE/B,oBAAC,aAAD;AAEE,MAAA,KAAK,EAAED,IAFT;AAIE,MAAA,GAAG,EAAEC,KAJP;AAME,MAAA,iBAAiB,EAAE,KAAKT,iBAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAxBJ,EAwCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAa,KAAKD,KAAL,CAAWL,OAAxB,CAxCF,EA4CI,KAAKK,KAAL,CAAWH,SAAX,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA5C5B,CAFF;AAsDD;;AArF+B;;AA0FlC,eAAeC,GAAf","sourcesContent":["import React from 'react';\n\nimport CharacterCard from './CharacterCard';\n\nimport './App.css';\n\nimport _ from 'lodash';\n\n\nlet message = 'NATTHAWUT'\n\n\nconst prepareStateFromWord = (given_word) => {\n\n  let word = given_word.toUpperCase()\n\n  let chars = _.shuffle(Array.from(word))\n\n  return {\n\n    word,\n\n    chars,\n\n    attempt: 1,\n\n    guess: [],\n\n    completed: false\n\n  }\n\n}\n\n\nclass App extends React.Component {\n\n\n  state = prepareStateFromWord(message);\n\n\n  activationHandler = (c) => {\n\n    let guess = [...this.state.guess, c]\n\n    this.setState({ guess })\n\n    if (guess.length == this.state.chars.length) {\n\n      if (guess.join('').toString() == this.state.word) {\n\n        this.setState({ guess: [], completed: true })\n\n      } else {\n\n        this.setState({ guess: [], attempt: this.state.attempt + 1 })\n\n      }\n\n    }\n\n  }\n\n\n  render() {\n\n    return (\n\n      <div>\n\n        {\n\n          Array.from(this.state.chars).map((item, index) => (\n\n            <CharacterCard\n\n              value={item}\n\n              key={index}\n\n              activationHandler={this.activationHandler}\n\n            />\n\n          ))\n\n        }\n\n        <h2>Selected</h2>\n\n        {\n\n          Array.from(this.state.guess).map((item, index) => (\n\n            <CharacterCard\n\n              value={item}\n\n              key={index}\n\n              activationHandler={this.activationHandler}\n\n            />\n\n          ))\n\n        }\n\n        <div>Attemp {this.state.attempt}</div>\n\n        {\n\n          this.state.completed && <h4>Complete</h4>\n\n        }\n\n      </div>\n\n    )\n\n  }\n\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}